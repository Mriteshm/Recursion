import java.io.*;
import java.util.List;
import java.util.StringTokenizer;

public class Runner {
    public static class FastReader {

        BufferedReader br;
        StringTokenizer root;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (root == null || !root.hasMoreTokens()) {
                try {
                    root = new StringTokenizer(br.readLine(), " ");
                } catch (Exception r) {
                    r.printStackTrace();
                }
            }
            return root.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

    }

    public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
    public static FastReader sc = new FastReader();

    private static int t ;
    private static String []str;

    private static void takeInput() {
        t = 1;
        str = new String[t];
        for(int i = 0; i < t; i++){
            str[i] = sc.next();
        }
    }

    private static void execute() {
        for(int i = 0; i < t; i++) {
            isPalindrome(str[i]);
        }
    }

    private static void executeAndPrintOutput() {
        for(int i = 0; i < t; i++){
            boolean ans = Solution.isPalindrome(str[i]);
            if(ans)
                System.out.println("true");
            else
                System.out.println("false");
        }
    }

    public static void main(String[] args) {
        takeInput();
        executeAndPrintOutput();
        out.close();
    }
	public static boolean  palindrome(String t,int si,int ei)
	{
		if(si>=ei)
		{
			return true;
		}
		if(t.charAt(si)!=t.charAt(ei))
		{
			return false;
		}
		return palindrome(t,si+1,ei-1);
	}

	public static boolean isPalindrome(String input) 
	{
		return palindrome(input,0,input.length()-1);
	}
}
